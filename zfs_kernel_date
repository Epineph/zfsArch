


```bash

# Define the URL
url="https://archzfs.com/archzfs/x86_64/"

# Define the path to the pacman.conf file
pacman_conf="/home/heini/test_scripts/pacman.conf"

# Export the URL so that it can be accessed as an environment variable in Python
export url

read -r filename date <<< $(python3 << 'END_PYTHON'
```

```python
import os
import requests
from bs4 import BeautifulSoup
import re
import sys

# Access the URL from the environment variable
url = os.getenv('url')

# Fetch the HTML content from the URL
response = requests.get(url)

# Check if the request was successful
if response.status_code != 200:
    print(f"Failed to retrieve the page, status code: {response.status_code}", file=sys.stderr)
    sys.exit(1)

# Parse the HTML content using BeautifulSoup
soup = BeautifulSoup(response.text, 'html.parser')

# Define the regular expression pattern for the files we're looking for
file_pattern = re.compile(r'zfs-linux-\d+.*\.zst')

# Initialize an empty list to store the dates
dates = []

# Search for the files matching the pattern
for a_tag in soup.find_all('a', href=True):
    if file_pattern.search(a_tag['href']):
        sibling_text = a_tag.next_sibling
        if sibling_text:
            parts = sibling_text.strip().split()
            date = ' '.join(parts[:2])
            dates.append((a_tag['href'], date))

# Sort the dates (assuming date format is consistent and lexicographic sort is sufficient)
dates.sort(key=lambda x: x[1], reverse=True)

# Print the most recent date
if dates:
    filename, most_recent_date = dates[0]
    print(filename, most_recent_date)
else:
    print("No matching files found.", file=sys.stderr)
    sys.exit(1)

END_PYTHON
´´´
)
´´´bash
# Check if Python script executed successfully
if [ $? -eq 0 ]; then
    # Use the captured output
    echo "Most recent file: $filename, Last Modified: $date"
else
    echo "The Python script failed."
    exit 1
fi

# Continue with your bash script...

# Convert the date to the required format (YYYY/MM/DD)
# Ensuring that the date format in your pacman.conf will be YYYY/MM/DD
formatted_date=$(echo $date | awk '{
    month = match("JanFebMarAprMayJunJulAugSepOctNovDec", $2) / 3;
    printf("%s/%02d/%s", $3, month, $1);
}')

# Make the changes for [core], [extra], and [community]
for repo in core extra community; do
    # Use \x27 for single quote to ensure that $repo and $arch are not expanded by the shell
    sed -i "/^\[$repo\]$/,/Include/ s|Include = .*|Server = https://archive.archlinux.org/repos/${formatted_date}/\$repo/os/\$arch\nSigLevel = PackageRequired|" $pacman_conf
done

# Add the [archzfs] repository configuration if it doesn't exist
if ! grep -q "\[archzfs\]" "$pacman_conf"; then
    echo -e "\n[archzfs]\nServer = https://archzfs.com/\$repo/\$arch\nSigLevel = Optional TrustAll" >> $pacman_conf
fi

echo "pacman.conf has been updated."
´´´
